### **Extract entities from this page image in a structured hierarchy based on the apparel style guide for Walmart fashion. Ensure the structure includes either:**

1. **Apparel_Category**: (for apparel-related guidelines) Specify the category of apparel (e.g., 'Women’s Swimwear', 'Men’s Lower Body'). Omit if not applicable.

2. **Product_Type**: (for apparel-related guidelines) Specify the product type (e.g., 'Rash Guards', 'Leggings', 'Shapewear'). If multiple product types are mentioned, split them into separate entries. Omit if not applicable.

3. **Guideline_Concept**: (for non-apparel-related guidelines) Use this field to capture top-level concepts such as 'Copy Standards', 'Grouping Standards', 'Product Naming Guidelines'. Use this when the page does not refer to specific apparel categories or product types.

### **Guideline Structure Based on `guideline_type`**:
Adapt the structure based on the **`guideline_type`** to ensure appropriate labeling. For example:

- **Photo Direction**: Use the label `image_requirements` to capture the steps required (e.g., 'Hero Image', 'Alternate Image', etc.).
- **Copy Standards**: Use the label `writing_guidelines` to capture tone, voice, and copy-related rules.
- **Product Name Guidelines**: Use the label `formula` for the naming convention and `example` to capture naming examples.
- **Attribute Guidelines**: Use `attribute_requirements` to capture specific attributes like `sleeve style`, `closure type`, etc.
- For other guideline types, use an appropriate label to represent key details.

### **Structure the Response**:
Ensure the response is structured in a consistent JSON format, focusing primarily on the **Cypher query** as follows:
```json
{
  "cypher_query": "MERGE (n1:Apparel_Category {name: '<Actual_Label_Value>'})-[:HAS_PRODUCT_TYPE]->(n2:Product_Type {name: '<Actual_Label_Value>'})-[:FOLLOWS_GUIDELINE]->(n3:Guideline_Type {name: '<Normalized_Guideline_Type>'}) WITH n1, n2, n3 UNWIND <context_specific_label_steps> AS step MERGE (n4)-[:HAS_STEP]->(n5:Step {name: step.step_name, description: step.description})"
}
```
### **Critical Rules for Cypher Query Construction**:

1. **Hierarchy Handling**:
   - **Apparel_Category** nodes are at the top level.
   - **Product_Type** nodes are children of **Apparel_Category**.
   - **Guideline_Type** nodes are children of **Product_Type** (or **Guideline_Concept** if non-apparel related).
   - **Steps** (or attributes) are children of **Guideline_Type**.
   
   - **Relation of Guideline_Type to Apparel_Category**: 
     - **Guideline_Type** can also be directly linked to **Apparel_Category** without a **Product_Type**. This occurs when the guidelines are more general and not tied to a specific product type.
     
     Example:
     
     ```cypher
     MERGE (n1:Apparel_Category {name: 'Apparel'})
     MERGE (n2:Guideline_Type {name: 'Content Standards'})
     MERGE (n1)-[:FOLLOWS_GUIDELINE]->(n2)
     ```

2. **Upsert Operations (MERGE)**:
   - **Always use `MERGE`** for **Apparel_Category** and **Product_Type** to avoid creating duplicate nodes.
   - Example for upsert operation:
   
   ```cypher
   MERGE (n1:Apparel_Category {name: 'Men’s Swimwear'})
   MERGE (n2:Product_Type {name: 'Rash Guards'})
   MERGE (n1)-[:HAS_PRODUCT_TYPE]->(n2)
   ```

3. **Use of UNWIND**:
   - **Group Queries Using UNWIND**: When creating multiple steps under the same **Guideline_Type**, always use **UNWIND** to avoid generating separate **CREATE** queries for each step. Example format:

   ```cypher
   UNWIND [
     {step_name: 'Step 1', description: 'Description 1'},
     {step_name: 'Step 2', description: 'Description 2'}
   ] AS step
   MERGE (n4)-[:HAS_STEP]->(n5:Step {name: step.step_name, description: step.description})
   ```

4. **Multiple Product Types**:
   - If multiple **Product_Type** entries exist for the same **Apparel_Category**, create separate **Product_Type** nodes and attach them to the same **Apparel_Category**.
   - Each **Product_Type** should have its own **Guideline_Type**, linked to **Apparel_Category** via the `HAS_PRODUCT_TYPE` relationship.

   Example:

   ```cypher
   MERGE (n1:Apparel_Category {name: 'Men’s Swimwear'})
   MERGE (n2:Product_Type {name: 'Rash Guards'})
   MERGE (n3:Product_Type {name: 'Board Shorts'})
   MERGE (n1)-[:HAS_PRODUCT_TYPE]->(n2)
   MERGE (n1)-[:HAS_PRODUCT_TYPE]->(n3)
   ```

5. **Guideline_Type and Steps**:
   - Ensure **Guideline_Type** nodes are properly connected to their respective **Product_Type** or **Guideline_Concept**. Use `[:FOLLOWS_GUIDELINE]` to connect.
   - Always use **UNWIND** for batch creation of steps under each guideline, as mentioned.

6. **Avoid Separate CREATE Queries for Each Step**:
   - **Do Not Generate Separate CREATE Queries**: Instead of creating multiple queries for each step, group the steps into a single **UNWIND** query for efficiency and conciseness.

7. **WITH Clause Between MERGE and UNWIND**:
   - **Always use `WITH` between `MERGE` and `UNWIND`**: This is required to pass variables between the `MERGE` operations and the `UNWIND` operation to ensure that the correct context is carried forward.

8. **Normalization of `Guideline_Type`**:
   - Ensure that the extracted **Guideline_Type** is normalized to one of the pre-defined types, e.g., "Product Type Photo Direction" should be normalized to "Photo Direction".

9. **Avoid Duplicating Guidelines**:
   - If a guideline is already attached to an **Apparel_Category** or **Product_Type**, avoid re-creating it. Ensure that existing nodes are used instead of duplicating guidelines.

### **Sanitizing Cypher Queries**:
- **Special Character Handling**: To prevent syntax errors, sanitize the Cypher queries by properly escaping special characters like single quotes (`'`) and backslashes (`\`).
  - Escape single quotes within strings by replacing `'` with `\'` to avoid conflicts.
  - Ensure that all special characters within **description** fields are escaped without removing the text.
  - **Use UNWIND** when handling multiple steps to ensure consistency in escaping across all steps.

### **General Guidelines for Cypher Queries**:
- Focus on constructing **well-formed** and **efficient** Cypher queries.
- Avoid generating queries too quickly—ensure the Cypher is well-thought-out to prevent issues like broken relationships, missed nodes, or improperly escaped characters.
- Validate query logic for proper node-to-node relationships, especially when adding multiple **Product_Type** or **Guideline_Type** nodes.
